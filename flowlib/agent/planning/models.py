"""
Planning models for the agent system.

This module defines the data models used in planning operations, including:
- Planning results
- Plan validation
- Planning explanations
"""

from typing import Dict, List, Optional, Any, Type
from pydantic import BaseModel, Field

# Import the original FlowMetadata to avoid duplication
from ...flows.metadata import FlowMetadata

# Use StageRegistry for flow operations
from ...flows.registry import StageRegistry

# --- Imports needed for Plan/PlanStep ---
import uuid
from pydantic import Field, BaseModel
from typing import List, Dict, Any # Added Dict, Any for PlanStep.flow_inputs if we revert
# ----------------------------------------

# --- Planning-Specific Models ---

class PlanningExplanation(BaseModel):
    """Human-readable explanation of a plan.
    
    Attributes:
        explanation: Text explaining the planning decisions
        rationale: Optional rationale for the decisions
        decision_factors: Factors that influenced the decision
    """
    explanation: str = Field(..., description="Text explaining the planning decisions")
    rationale: str = Field(None, description="Rationale for the decisions")
    decision_factors: List[str] = Field(default_factory=list, description="Factors that influenced the decision")

class PlanningResult(BaseModel):
    """Result of a planning operation.
    
    Attributes:
        selected_flow: Name of the selected flow
        inputs: Inputs for the selected flow
        metadata: Metadata about the planning decision
    """
    selected_flow: str = Field(..., description="Name of the selected flow")
    reasoning: PlanningExplanation = Field(..., description="Reasoning behind the planning decision")

class PlanningValidation(BaseModel):
    """Result of plan validation.
    
    Attributes:
        is_valid: Whether the plan is valid
        errors: List of validation errors if any
    """
    is_valid: bool = Field(..., description="Whether the plan is valid")
    errors: List[str] = Field(default_factory=list, description="List of validation errors if any")

# --- Moved Plan Models --- 

class PlanStep(BaseModel):
    """Represents a single step within an agent's plan."""
    step_id: str = Field(default_factory=lambda: str(uuid.uuid4()), description="Unique identifier for this plan step.")
    flow_name: str = Field(..., description="The name of the flow to execute for this step.")
    step_intent: str = Field(..., description="The specific goal or instruction for this step.")
    rationale: str = Field(..., description="Explanation of why this step is necessary for the overall task.")
    expected_outcome: Optional[str] = Field(None, description="Optional description of what this step aims to achieve.")

    class Config:
        extra = "forbid"

class Plan(BaseModel):
    """Represents a multi-step plan generated by the agent planner."""
    plan_id: str = Field(default_factory=lambda: str(uuid.uuid4()), description="Unique identifier for this plan.")
    task_description: str = Field(..., description="The original task this plan is designed to address.")
    steps: List[PlanStep] = Field(..., description="The sequence of steps to be executed to achieve the task.")
    overall_rationale: Optional[str] = Field(None, description="Optional high-level strategy or reasoning behind the entire plan.")

    class Config:
        extra = "forbid"


