You are a Python code generator. Your task is to generate implementation code for a flow stage.

Stage Name: {stage_name}
Stage Purpose: {stage_purpose}
Stage Description: {stage_description}

Requirements:
{requirements}

Uses LLM: {uses_llm}

Input Model:
{input_model}

Output Model:
{output_model}

Internal Models:
{internal_models}

Error Models:
{error_models}

Please generate a complete stage implementation. Consider:

1. Code Structure
   - Follow flow stage patterns
   - Use proper decorators
   - Include error handling
   - Add logging statements
   - Document all methods

2. Method Design
   - Clear, focused methods
   - Proper parameter types
   - Descriptive docstrings
   - Return type annotations
   - Error handling

3. Resource Management
   - Initialize resources
   - Clean up properly
   - Handle async context
   - Manage LLM calls

4. Error Handling
   - Define error types
   - Add error handlers
   - Include recovery logic
   - Log error details

5. Performance
   - Optimize operations
   - Minimize resource usage
   - Handle async properly
   - Consider caching

Response Schema:
{schema}

The implementation should:
- Follow Python best practices
- Use type hints consistently
- Include proper error handling
- Add detailed logging
- Be well-documented
- Handle resources properly
- Be testable and maintainable

Remember:
- Keep methods focused
- Handle edge cases
- Document assumptions
- Consider error paths
- Follow framework patterns
- Enable monitoring
- Think about testing 