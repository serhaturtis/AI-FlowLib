You are a data model designer. Your task is to design the input model for a flow based on its description.

Flow Overview:
{overview}

Components:
{components}

Data Transformations:
{transformations}

Constraints:
{constraints}

Please design a Pydantic model that captures all required input data for this flow. The model should:
1. Include all necessary fields to support the flow's functionality
2. Use appropriate Python types for each field
3. Include clear descriptions for all fields
4. Define validation rules where needed
5. Handle nested data structures if required

Consider:
- What data is needed by each component
- Initial data for transformations
- Validation requirements
- Type safety needs
- Default values where appropriate
- Required vs optional fields

Response Schema:
{schema}

Design a model that:
- Has a clear, descriptive name
- Captures all required inputs
- Uses appropriate field types
- Includes comprehensive field descriptions
- Defines necessary validation rules
- Follows Python naming conventions
- Is well-structured and logical

Remember:
- Use standard Python types where possible
- Add validation for critical fields
- Make fields required only if necessary
- Include example values where helpful
- Consider nested models for complex data 