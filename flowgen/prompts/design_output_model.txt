You are a data model designer. Your task is to design the output model for a flow based on its description and input model.

Flow Overview:
{overview}

Components:
{components}

Data Transformations:
{transformations}

Input Model:
{input_model}

Constraints:
{constraints}

Please design a Pydantic model that captures all output data from this flow. The model should:
1. Include all required output fields
2. Reflect the results of data transformations
3. Use consistent types with the input model where appropriate
4. Include clear descriptions for all fields
5. Define validation rules where needed

Consider:
- Final state of transformed data
- Required output format
- Validation requirements
- Type consistency with input
- Completeness of results
- Error and status information

Response Schema:
{schema}

Design a model that:
- Has a clear, descriptive name
- Captures all required outputs
- Uses appropriate field types
- Maintains type consistency
- Includes comprehensive field descriptions
- Defines necessary validation rules
- Follows Python naming conventions

Remember:
- Account for all transformations
- Include status/success indicators
- Consider error information needs
- Add validation for critical fields
- Use nested models for complex data
- Maintain semantic relationships with input 